import java.util.ArrayList;

public class Solution 
{
    public static int findLargestMinDistance(ArrayList<Integer> a, int k)
    {
        //    Write your code here.
        int low = a.get(0);
        int high = 0;
        //find maximum and summation:
        for (int i = 0; i < a.size(); i++) {
            low = Math.max(low, a.get(i));
            high += a.get(i);
        }

        //Apply binary search:
        while (low <= high) {
            int mid = (low + high) / 2;
            int partitions = countPartitions(a, mid);
            if (partitions > k) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return low;
    }
    public static int countPartitions(ArrayList<Integer> a, int maxSum) {
        int n = a.size(); //size of array.
        int partitions = 1;
        long subarraySum = 0;
        for (int i = 0; i < n; i++) {
            if (subarraySum + a.get(i) <= maxSum) {
                //insert element to current subarray
                subarraySum += a.get(i);
            } else {
                //insert element to next subarray
                partitions++;
                subarraySum = a.get(i);
            }
        }
        return partitions;
    }
}
